import logging
import bot_token
from aiogram import Bot, Dispatcher, types, executor

import sqlite_db
import dialog

logging.basicConfig(level=logging.INFO)
bot = Bot(token=bot_token.BOT_TOKEN)
dp = Dispatcher(bot)


async def on_startup(_):
    await sqlite_db.db_connect()
    print('connection successful')


@dp.message_handler(commands=["participate"])
async def cmd_start_group(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        await sqlite_db.add_user(tg_id_user=message.from_user.id, username=message.from_user.username,
                                 room=message.chat.id)


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.chat.type == "private":
        await bot.send_message(message.from_user.id, text=dialog.start_private)
    if message.chat.type in ["group", "supergroup"]:
        await bot.send_message(message.chat.id, text=dialog.start_group)


@dp.message_handler(commands=["play"])
async def play_start(message: types.Message):
    if message.from_user.username == bot_token.username and message.chat.type == "group":
        count = await sqlite_db.count_part(message.chat.id)
        await sqlite_db.start_play(count, message.chat.id)
        await message.reply(
            "–ê –≤—ã –Ω–∞—Ä—è–¥–∏–ª–∏ —É–∂–µ —ë–ª–∫—É?üéÑ –ö—Å—Ç–∞—Ç–∏ —É –Ω–µ–µ –ø–µ—Å–Ω—è –∫–ª–∞—Å—Å–Ω–∞—è –µ—Å—Ç—å: –£–Æ–¢–ù–û–ï–ï–ï–ï –ö–ê–§–≠–≠–≠–≠–≠–≠–≠–≠üòπ)))))) –Ø –∂–¥—É, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ –º–Ω–µ –≤ –ª—Å: @ChillSanta_botü•∞")
    else:
        await message.reply("–æ—Ö–æ—Ö–æ, —è –≤–∏–∂—É —Ç—É—Ç –æ–¥–Ω–æ–≥–æ –≥–∞–Ω–≥—Å—Ç–µ—Ä–∞üôà, –∏–≥—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è")


@dp.message_handler(commands=["get_recipient"])
async def get_recipient(message: types.Message):
    if message.chat.type == "private":
        recipient = await sqlite_db.check_username_recipient(message.from_user.id)
        if not recipient:
            await bot.send_message(message.from_user.id, text="–¢—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ, —Ç–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å /participate –≤ —á–∞—Ç–µ —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏")
        else:
            str_recipient = ', '.join(list(map(lambda x: f'@{x}', recipient)))
            text = dialog.get_recipient_text + str_recipient + "\n–ö–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É, –ø–∏—à–∏ –º–Ω–µ /sent"
            await bot.send_message(message.from_user.id, text=text)


@dp.message_handler(commands=["sent"])
async def sent(message: types.Message):
    if message.chat.type == "private":
        recipient_id = await sqlite_db.check_tg_id_recipient(message.from_user.id)
        recipient = await sqlite_db.check_username_recipient(message.from_user.id)
        str_recipient = ', '.join(list(map(lambda x: f'@{x}', recipient)))
        text = dialog.sent_text_to + "\n" + str_recipient + f" —Ç–µ–ø–µ—Ä—å {'–∑–Ω–∞—é—Ç' if len(recipient) > 1 else '–∑–Ω–∞–µ—Ç'}, —á—Ç–æ —Ç–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –æ—Ç–¥–∞—Å—Ç –ø–æ–¥–∞—Ä–æ–∫!"

        await bot.send_message(message.from_user.id, text=text)

        for i in range(len(recipient)):
            await bot.send_message(recipient_id[i], text=dialog.sent_text_from)


@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await bot.send_message(message.chat.id, text=dialog.help_text)


@dp.message_handler(commands=["received"])
async def received(message: types.Message):
    await bot.send_message(message.from_user.id, text=dialog.received_from)
    recipient_id = await sqlite_db.check_tg_id_recipient(message.from_user.id)
    for i in range(len(recipient_id)):
        await bot.send_message(recipient_id[i], text=dialog.received_to)
        await sqlite_db.delete(recipient_id[i])


if __name__ == "__main__":
    executor.start_polling(dispatcher=dp,
                           skip_updates=True,
                           on_startup=on_startup)
